float SmoothnessToRoughness(float smoothness)
{
    return (1.0f - smoothness) * (1.0f - smoothness);
}

float RoughnessToSmoothness(float roughness)
{
    return 1.0f - sqrt(roughness);
}

float ShininessToSmoothness(float spec)
{
    return RoughnessToSmoothness(sqrt(2.0 / (spec + 2)));
}

float RoughnessToShininess(float roughness)
{
    return 2.0f / (roughness * roughness + 0.0001) - 2.0f;
}

float SmoothnessToShininess(float smoothness)
{
    float roughness = SmoothnessToRoughness(smoothness);
    return RoughnessToShininess(roughness);
}

float fresnelSchlick(float f0, float f9, float LdotH)
{
    return lerp(f0, f9, pow(1 - LdotH, 5));
}

float3 fresnelSchlick(float3 f0, float3 f9, float LdotH)
{
    return lerp(f0, f9, pow(1 - LdotH, 5));
}

float ComputeSpecularOcclusion(float nv, float ao, float smoothness)
{
    return saturate(pow(abs(nv + ao), smoothness) - 1 + ao);
}

float3 ComputeSpecularMicroOcclusion(float3 f0)
{
    return saturate(dot(f0, 0.33333h) * 50);
}

float ComputePhaseFunctions(float theta, float g)
{
    float gg = g * g;
    float g2 = 2 * g;
    
    float theta2 = theta * theta;
    float phase = ((1 - gg) /  pow(abs(1.0 + gg - g2 * theta2), 1.5));
    
    return phase;
}

float4 SubsurfaceShadingPreIntegratedSkin(MaterialParam material, float3 N, float3 L)
{
    float nl = saturate(dot(N, L) * 0.5 + 0.5);
    float curvature = material.customDataA;
    float curva = (1.0 / madd(curvature, 0.5 - 0.0625, 0.0625) - 2.0) / (16.0 - 2.0);
    float oneMinusCurva = 1.0 - curva;

    float3 rangeMin = float3(0.0, 0.3, 0.3);
    float3 rangeMax = float3(1.0, 0.7, 0.7);
    float3 offset = float3(0.0, 0.06, 0.06);
    float3 t = saturate(madd(nl, 1.0 / (rangeMax - rangeMin), (offset + rangeMin) / (rangeMin - rangeMax)));
    float3 lowerLine = (t * t) * float3(0.65, 0.5, 0.9);
    lowerLine.r += 0.045;
    lowerLine.b *= t.b;
    
    float3 m1 = float3(1.75, 2.0, 1.97);
    float3 m2 = float3(1.95, 2.0, 2.0);
    
    float3 lerpMin = float3(0.0, 0.35, 0.35);
    float3 lerpMax = float3(1.0, 0.7 , 0.6);
    float3 lerpT = saturate(madd(nl, 1.0 / (lerpMax - lerpMin), lerpMin / (lerpMin - lerpMax)));

    float3 upperLine1 = saturate(madd(nl, m1, float3(0.99, 0.99, 0.99) -m1));
    float3 upperLine2 = saturate(madd(nl, m2, float3(0.99, 0.99, 1.0) - m2));
    
    float3 curve1 = lerp(lowerLine, upperLine1, lerpT * lerpT);
    float3 curve2 = upperLine2;
    
    float oneMinusCurva2 = oneMinusCurva * oneMinusCurva;
    
    float3 brdf = lerp(curve1, curve2, madd(oneMinusCurva2, -1.0 * oneMinusCurva2, 1.0));
        
#if SSSS_QUALITY > 1
    return float4(material.customDataB * brdf, 0);
#else
    return float4(material.albedo * material.customDataB * brdf, 0);
#endif
}

float4 SubsurfaceShadingPreIntegratedSkinLUT(sampler CurvatureLUT, MaterialParam material, float3 N, float3 L)
{
    float nl = saturate(dot(N, L) * 0.5 + 0.5);
    float curvature = material.customDataA;
    float3 brdf = srgb2linear(tex2Dlod(CurvatureLUT, float4(nl, curvature, 0, 0)).rgb);
#if SSSS_QUALITY > 1
    return float4(material.customDataB * brdf, 0);
#else
    return float4(material.albedo * material.customDataB * brdf, 0);
#endif
}

float4 SubsurfaceShadingTwoSide(MaterialParam material, float3 N, float3 L, float3 V)
{
    float w = 0.5;
    float nl = saturate((dot(-N, L) + w) / pow2(1 + w));
    float phase = ComputePhaseFunctions(dot(V, L), 1 - material.customDataA);
#if SSSS_QUALITY > 1
    return float4(material.customDataB * nl * phase, 0);
#else
    return float4(material.albedo * material.customDataB * nl * phase, 0);
#endif
}

float BurleyBRDF(float3 N, float3 V, float3 L, float roughness)
{
    float3 H = normalize(V + L);
    
    float nl = saturate(dot(N, L));
    float vh = saturate(dot(V, H));
    float nv = max(abs(dot(N, V)), 0.1);
    
    float energyBias = 0.5 * roughness;
    float energyFactor = lerp(1, 1 / 1.51, roughness);
    
    float Fd90 = energyBias + 2.0 * vh * vh * roughness;
    float FdV = 1 + (Fd90 - 1) * pow5(1 - nv);
    float FdL = 1 + (Fd90 - 1) * pow5(1 - nl);
    
    return FdV * FdL * energyFactor * nl;
}

float OrenNayarBRDF(float3 N, float3 V, float3 L, float roughness)
{
    float3 H = normalize(V + L);
    
    float nl = saturate(dot(N, L));
    float vh = saturate(dot(V, H));
    float nv = max(abs(dot(N, V)), 0.1);
    
    float m = roughness * roughness;
    float s = dot(L, V) - dot(N, L) * dot(N, V);
    float t = s <= 0 ? 1 : max(max(dot(N, L), dot(N, V)), 1e-6);
    float A = 1.0h / (1.0h + (0.5h - 2.0h / (3.0h * PI)) * m);
    float B = m * A;
    
    return max(A + B * (s / t), 0) * nl;
}

float3 DiffuseBRDF(float3 N, float3 L, float3 V, float roughness)
{
    return BurleyBRDF(N, V, L, roughness);
}

float3 SpecularBRDF_GGX(float nh, float nl, float vh, float nv, float roughness, float3 specular, float NormalizationFactor)
{
    float m2 = roughness * roughness;
    float spec = (nh * m2 - nh) * nh + 1;
    spec = m2 / (spec * spec) * NormalizationFactor;

    float Gv = nl * sqrt((-nv * m2 + nv) * nv + m2);
    float Gl = nv * sqrt((-nl * m2 + nl) * nl + m2);
    spec *= 0.5h / (Gv + Gl);

    float3 f0 = max(0.04, specular);
    float3 f90 = ComputeSpecularMicroOcclusion(f0);
    float3 fresnel = fresnelSchlick(f0, f90, vh);

    return fresnel * spec * nl;
}

float3 SpecularBRDF_InvGGX(float nh, float nl, float vh, float nv, float roughness, float3 specular, float NormalizationFactor)
{
    float m = roughness * roughness;
    float m2 = m * m;
    float A = 4;
    float spec = (nh - nh * m2) * nh + m2;
    spec /= (1 + A * m2) * (1 + 4 * m2 * m2 / (spec * spec)) * NormalizationFactor;
    
    float G = 4 * (nl + nv - nl * nv);
    spec /= G;
    
    float3 f0 = max(0.04, specular);
    float3 fresnel = fresnelSchlick(f0, 1, vh);
    
    return fresnel * spec * nl;
}

float4 SpecularBRDF_ClearCoat(float nh, float nl, float vh, float nv, float roughness, float specular, float NormalizationFactor)
{    
    float m2 = roughness * roughness;
    float spec = (nh * m2 - nh) * nh + 1;
    spec = m2 / (spec * spec) * NormalizationFactor;
    
    float G = (4 * vh * vh + 1e-5);
    spec /= G;
       
    float fresnel = fresnelSchlick(specular, 1, vh);
    spec *= fresnel * nl;
    
    return float4(spec, spec, spec, 1 - fresnel);
}

float3 SpecularBRDF_GGX(float3 N, float3 L, float3 V, float roughness, float3 specular, float NormalizationFactor)
{   
    float3 H = normalize(V + L);

    float nh = saturate(dot(N, H));
    float nl = saturate(dot(N, L));
    float vh = saturate(dot(V, H));
    float nv = abs(dot(N, V)) + 1e-5h;
    
    return SpecularBRDF_GGX(nh, nl, vh, nv, roughness, specular, NormalizationFactor);
}

float4 StandardShading(MaterialParam material, float3 N, float3 Ld, float3 Ls, float3 V, float normalizeFactor)
{
    float3 H = normalize(V + Ls);

    float nh = saturate(dot(N, H));
    float nl = saturate(dot(N, Ls));
    float vh = saturate(dot(V, H));
    float nv = abs(dot(N, V)) + 1e-5h;
    
    float roughness = max(SmoothnessToRoughness(material.smoothness), 0.001);
    
    float3 diffuse = DiffuseBRDF(N, Ld, V, roughness);
    float3 specular = SpecularBRDF_GGX(nh, nl, vh, nv, roughness, material.specular, normalizeFactor);
    
#if SSSS_QUALITY > 1
    if (material.lightModel != SHADINGMODELID_SUBSURFACE &&
        material.lightModel != SHADINGMODELID_SKIN)
    {
        diffuse *=  material.albedo;
    }
#else
    diffuse *= material.albedo;
#endif

#if SSSS_QUALITY > 1
    return float4(diffuse, luminance(specular));
#else
    return float4(diffuse + specular, 0);
#endif
}

float4 ClothShading(MaterialParam material, float3 N, float3 Ld, float3 Ls, float3 V, float normalizeFactor)
{
    float3 H = normalize(V + Ls);

    float nh = saturate(dot(N, H));
    float nl = saturate(dot(N, Ls));
    float vh = saturate(dot(V, H));
    float nv = abs(dot(N, V)) + 1e-5h;
    
    float roughness = max(SmoothnessToRoughness(material.smoothness), 0.001);
    
    float3 diffuse = DiffuseBRDF(N, Ld, V, roughness);
    float3 spec1 = SpecularBRDF_GGX(nh, nl, vh, nv, roughness, material.specular, normalizeFactor);
    float3 spec2 = SpecularBRDF_InvGGX(nh, nl, vh, nv, roughness, material.customDataB, normalizeFactor);
    float3 spec = lerp(spec1, spec2, material.customDataA); 
       
    return float4(material.albedo * diffuse + spec, 0);
}

float4 ClearCoatShading(MaterialParam material, float3 N, float3 Ld, float3 Ls, float3 V, float normalizeFactor)
{
    float3 H = normalize(V + Ls);

    float nh = saturate(dot(N, H));
    float nl = saturate(dot(N, Ls));
    float vh = saturate(dot(V, H));
    float nv = abs(dot(N, V)) + 1e-5h;
    
    float roughness1 = max(SmoothnessToRoughness(material.smoothness), 0.001);
    float roughness2 = max(SmoothnessToRoughness(material.customDataA), 0.001);
    
    float3 diffuse = DiffuseBRDF(N, Ld, V, roughness1);
    float3 spec1 = SpecularBRDF_GGX(nh, nl, vh, nv, roughness1, material.specular, normalizeFactor);
    float4 spec2 = SpecularBRDF_ClearCoat(nh, nl, vh, nv, roughness2, 0.04, normalizeFactor);    
    return float4((material.albedo * diffuse + spec1) * spec2.a + spec2.rgb, 0);
}

float4 SurfaceShading(MaterialParam material, float3 N, float3 Ld, float3 Ls, float3 V, float normalizeFactor)
{
#if LIGHTMODEL_BRDF >= 1
    if (material.lightModel == SHADINGMODELID_CLOTH)
    {
        return ClothShading(material, N, Ld, Ls, V, normalizeFactor);
    }
    else if (material.lightModel == SHADINGMODELID_CLEAR_COAT)
    {
        return ClearCoatShading(material, N, Ld, Ls, V, normalizeFactor);
    }
    else
    {
        return StandardShading(material, N, Ld, Ls, V, normalizeFactor);
    }
#else
    return StandardShading(material, N, Ld, Ls, V, normalizeFactor);
#endif
}

float4 SubsurfaceShading(MaterialParam material, float3 N, float3 L, float3 V)
{
#if LIGHTMODEL_BRDF >= 1
    if (material.lightModel == SHADINGMODELID_SKIN)
    {
        return SubsurfaceShadingPreIntegratedSkin(material, N, L);
    }
    else if (material.lightModel == SHADINGMODELID_SUBSURFACE)
    {
        return SubsurfaceShadingTwoSide(material, N, L, V);
    }
    else
    {
        return 0;
    }
#else
    return SubsurfaceShadingTwoSide(material, N, L, V);
#endif
}

float4 SubsurfaceShadingLUT(sampler CurvatureLUT, MaterialParam material, float3 N, float3 L, float3 V)
{
    if (material.lightModel == SHADINGMODELID_SKIN)
    {
        return SubsurfaceShadingPreIntegratedSkinLUT(CurvatureLUT, material, N, L);
    }
    else if (material.lightModel == SHADINGMODELID_SUBSURFACE)
    {
        return SubsurfaceShadingTwoSide(material, N, L, V);        
    }
    else
    {
        return 0;
    }
}

float EnvironmentMip(int miplevel, float smoothness)
{
    return lerp(miplevel, 0, smoothness * smoothness);
}

float3 EnvironmentReflect(float3 normal, float3 view)
{
    return reflect(-view, normal);
}

float3 EnvironmentSpecularUnreal4(float3 N, float3 V, float smoothness, float3 specular)
{
    float4 c0 = float4(-1, -0.0275, -0.572, 0.022);
    float4 c1 = float4(1, 0.0425, 1.04, -0.04);
    float4 r = SmoothnessToRoughness(smoothness) * c0 + c1;
    float a004 = min(r.x * r.x, exp2(-9.28 * dot(N, V))) * r.x + r.y;
    float2 AB = float2(-1.04, 1.04) * a004 + r.zw;
    return specular * AB.x + AB.y;
}

float EnvironmentSpecularUnreal4(float3 N, float3 V, float smoothness)
{
    const float2 c0 = float2(-1, -0.0275);
    const float2 c1 = float2(1, 0.0425);
    float2 r = SmoothnessToRoughness(smoothness) * c0 + c1;
    return min(r.x * r.x, exp2(-9.28 * dot(N, V))) * r.x + r.y;
}

float3 ComputeDiffuseDominantDir(float3 N, float3 V, float roughness)
{
    float a = 1.02341f * roughness - 1.51174f; 
    float b = -0.511705f * roughness + 0.755868f; 
    return lerp(N, V, saturate((dot(N, V) * a + b) * roughness));
}

float3 ComputeSpecularDominantDir(float3 N, float3 R, float roughness) 
{
    float smoothness = saturate(1 - roughness);
    float lerpFactor = smoothness * (sqrt(smoothness) + roughness);
    return lerp(N, R, lerpFactor);
}